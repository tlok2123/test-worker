"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/node/index.ts
var node_exports = {};
__export(node_exports, {
  initAsync: () => import_photon_rs.default,
  photonWasmModule: () => photonWasmModule
});
module.exports = __toCommonJS(node_exports);

// ../../node_modules/.pnpm/tsup@8.5.0_postcss@8.4.38_tsx@4.20.3_typescript@5.8.3_yaml@2.4.2/node_modules/tsup/assets/cjs_shims.js
var getImportMetaUrl = () => typeof document === "undefined" ? new URL(`file:${__filename}`).href : document.currentScript && document.currentScript.src || new URL("main.js", document.baseURI).href;
var importMetaUrl = /* @__PURE__ */ getImportMetaUrl();

// src/node/index.ts
var import_image_data = require("@cf-wasm/internals/polyfills/image-data");
var import_node_fs = __toESM(require("fs"), 1);
var import_node_path = __toESM(require("path"), 1);
var import_node_url = __toESM(require("url"), 1);
var import_photon_rs = __toESM(require("../lib/photon_rs.js"), 1);
__reExport(node_exports, require("../lib/photon_rs.js"), module.exports);
var filename = import_node_url.default.fileURLToPath(importMetaUrl);
var dirname = import_node_path.default.dirname(filename);
var photonWasmBinary = import_node_fs.default.readFileSync(import_node_path.default.resolve(dirname, "../lib/photon_rs_bg.wasm"));
var photonWasmModule = new WebAssembly.Module(photonWasmBinary);
(0, import_photon_rs.initSync)({ module: photonWasmModule });
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  initAsync,
  photonWasmModule,
  ...require("../lib/photon_rs.js")
});
